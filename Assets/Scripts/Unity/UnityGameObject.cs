using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class UnityGameObject : MonoBehaviour
{
    /************************************************************************
	 * 게임오브젝트 (GameObject)
	 * 
	 * 씬을 구성하는 모든 오브젝트의 기본 클래스
	 * 게임오브젝트만으로는 독자적인 기능이 없음. 실질적인 기능은 컴포넌트들이 수행
	 * 게임오브젝트는 컴포넌트들을 가지기 위한 컨테이너
	 ************************************************************************/

    // <게임오브젝트 구성요소>
    // name			: 게임오브젝트의 이름
    // active		: 게임오브젝트의 활성화 여부, 비활성화인 경우 씬에 없는 게임오브젝트로 취급됨
    // static		: 게임오브젝트의 정적상태 여부, 런타임 당시 변경되지 않는 데이터를 지정하여 최적화
    // tag			: 게임오브젝트의 태그, 게임오브젝트를 특정하기 위한 수단으로 사용
    // layer		: 게임오브젝트의 레이어, 씬에서 게임오브젝트를 분리하는 기준 (카메라의 선별적 표현, 충돌 그룹, 레이어 마스크 등에 사용)
    // component	: 게임오브젝트에 포함된 기능모듈, 게임오브젝트는 컴포넌트를 담기위한 컨테이너 역할

    /*
    <상속> A is B
    장점 : 부모 클래스부터 물려받은 부분은 다시 쓸 필요가 없기 때문에 재사용 면에서 효율적
    단점 : 부모, 조상 클래스가 될 공통된 최소 필수 집합을 개발자가 미리 예상하기 어려움
    -> 완벽하게 순수한 Base Class를 만드는 것은 힘듬, 자식 클래스가 필요로 하지 않는 기능도 물려줄 수 있는 등 더하거나 빼야할 것이 많음
    -> ex) 오크는 몬스터다. Orc is Monster.

    <컴포넌트> A has B
    빈 컨테이너에 필요할 때마다 원하는 기능을 갖다 붙여 포함시키는 방식. (부품)
    각자의 기능을 가지고 있는 스스로 동작하는 독립적인 부품
    - 독립적인 클래스로 만들어 두고, 만들어 둔 것을 부품 붙이듯이 갖다 붙이면 됨
     */

    
}
